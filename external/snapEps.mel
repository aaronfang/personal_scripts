// snapEps.mel
//
//# _______________________________________________________________________
//# |
//# |  Original Author:
//# |		Paul Anand <panand@aw.sgi.com>
//# |
//# |  Description:
//# |		moves the eps of the second curve to match the first one
//# |
//# |  Usage:
//# |      select curve1 curve2; snapEps;
//# |
//# _______________________________________________________________________
//#
//?ALIAS|WAVEFRONT MAKES NO WARRANTIES, EXPRESS, IMPLIED OR
//?ARISING BY CUSTOM OR TRADE USAGE, AND TO THE EXTENT
//?PERMITTED BY APPLICABLE LAW, SPECIFICALLY DISCLAIMS ANY
//?IMPLIED WARRANTIES OF TITLE, NONINFRINGEMENT OR OF FITNESS
//?FOR A PARTICULAR PURPOSE. TO THE EXTENT PERMITTED BY
//?APPLICABLE LAW, (I) ALIAS|WAVEFRONT'S LIABILITY IN CONTRACT,
//?TORT OR OTHERWISE ARISING OUT OF OR IN CONNECTION WITH THE
//?PLUG-INS OR SOURCE CODE SHALL NOT EXCEED THE PURCHASE
//?PRICE PAID BY CUSTOMER FOR THE PLUG-INS OR SOURCE CODE
//?EXAMPLES, AND (II) IN NO EVENT SHALL ALIAS|WAVEFRONT BE
//?LIABLE FOR ANY PUNITIVE DAMAGES OR LOST PROFITS OR OTHER
//?SPECIAL, INDIRECT, INCIDENTAL, OR CONSEQUENTIAL DAMAGES,
//?INCLUDING ANY DAMAGES RESULTING FROM LOSS OF BUSINESS
//?ARISING OUT OF OR IN CONNECTION WITH THE PERFORMANCE OF THE
//?PLUG-INS OR SOURCE CODE EXAMPLES, EVEN IF ALIAS|WAVEFRONT
//?HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
//?CUSTOMER SHALL INDEMNIFY ALIAS|WAVEFRONT AND HOLD IT
//?HARMLESS FROM AND AGAINST ANY LOSS, CLAIM OR DAMAGE TO
//?ANY PERSON ARISING OUT OF CUSTOMER'S USE OF THE PLUG-INS
//?OR SOURCE CODE EXAMPLES.
//

global proc int snapEps () 
{

 $curveNames = `ls -sl`;
  
 if (size($curveNames) < 2) 
	{
		error("Less than 2 objects selected	");
		
		return 0;
 }

 if (size($curveNames) > 2) 
	{
		error("More than 2 objects selected");

		return 0;
 }

 for ($i=0; $i<size($curveNames); $i++)
	{
		pickWalk -d down; 
		string $checkType[];
		$checkType = `ls -sl -showType`;
		$checkString = "";
		for ($j=0; $j<size($checkType); $j++) 
		{
			$checkString = ($checkString+" "+$checkType[$j]);
		}
		print ($checkString+"\n");
		int $testType = eval("gmatch(\""+$checkString+"\",\"* nurbsCurve *\")");
		print ($testType+"\n");
		if ($testType==1) 	
		{
			pickWalk -d up;
		} 
		else 
		{
			error ("Only objects of type nurbsCurve should be selected");
			return 0;
		} 
 }

 $epointFloatArray = `getAttr ($curveNames[1]+".ep[*]")`;
 $sizeArray1 = size($epointFloatArray);
 $epointFloatArray = `getAttr ($curveNames[0]+".ep[*]")`;

 $sizeArray2 = size($epointFloatArray);

 if ($sizeArray1 != $sizeArray2) 
	{
		warning("Number of edit points do not match");
 }

 int $j = 0;
 for ($i=0; $i<size($epointFloatArray); $i+=3) 
	{
  	select ($curveNames[1]+".ep["+$j+"]");
		move -a $epointFloatArray[$i] $epointFloatArray[$i+1] $epointFloatArray[$i+2];
		$j++;
 };

 select -d; 

 return 1;
}	
