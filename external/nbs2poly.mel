//
// Description: what this does
//
// $Id: mod_nurbs2poly.mel,v 1.2 2010/04/22 22:06:13 maross Exp $
//

//Created by Cristian Dumitriu in March 2010
//Description: This tool converts a selection of nurbs surfaces to polys respecting the original shape. 
//			   It removes the second and one before last rows of CVs (redundant rows) in the direction(s)
//			   in which the nurbs surf is CUBIC and not periodic. This way, the convertion is one to one
//			   with minimal shape erosion, and the resulting poly mesh's vertices are coincident with
//			   the CVs of the original nurbs surface.


global proc mod_nurbs2poly.removeHullsInU (string $surf, string $shape){
	int $spansU = getAttr ($shape + ".spansU"); //recalculate the # of spans in U dir.
	int $spansV = getAttr ($shape + ".spansV"); //recalculate the # of spans in V dir.
    string $spanA = $surf + ".cv[" + ($spansU - 1) + "][0:" + ($spansV - 1) + "]";
    string $spanB = $surf + ".cv[1][0:" + ($spansV - 1) + "]";
    delete $spanA;
    delete $spanB;
}

global proc mod_nurbs2poly.removeHullsInV (string $surf, string $shape){
	int $spansU = getAttr ($shape + ".spansU"); //recalculate the # of spans in U dir.
	int $spansV = getAttr ($shape + ".spansV"); //recalculate the # of spans in V dir.
    string $spanA = $surf + ".cv[0:" + ($spansU - 1) + "][" + ($spansV - 1) + "]";
    string $spanB = $surf + ".cv[0:" + ($spansU - 1) + "][1]";
    delete $spanA;
    delete $spanB;
}

// Wrapper that defaults to smooth display, as not to ruin people's personal
// tools.
global proc string[] mod_nurbs2poly (){
    return mod_nurbs2poly.nurbs2poly(1);
}


global proc string[] mod_nurbs2poly.nurbs2poly (int $previewMode){
	string $surfSel[], $crntSurf, $shape[1], $poly[1], $parent[10], $buffer[10], $parentedSurf[1];
	int $degreeU, $degreeV, $formU, $formV, $spansU, $spansV;
	
	$surfSel = `filterExpand -expand true -sm 10`;
	
	for ($crntSurf in $surfSel){
		$shape = `listRelatives -shapes -path $crntSurf`;
		$degreeU = getAttr ($shape[0] + ".degreeU");
		$degreeV = getAttr ($shape[0] + ".degreeV");
		$formU = getAttr ($shape[0] + ".formU");
		$formV = getAttr ($shape[0] + ".formV");
		$spansU = getAttr ($shape[0] + ".spansU");
		$spansV = getAttr ($shape[0] + ".spansV");
		$parent = `listRelatives -parent -fullPath $crntSurf`; //Get the parent of $crntSurf with the entire path.
		
		if (($formU == 2) && ($formV != 2)){
			if ($degreeV == 3){
				rebuildSurface -ch 0 -rpo 1 -rt 0 -end 1 -kr 0 -kcp 1 -kc 0 -su 0 -du 0 -sv 0 -dv 1 -tol 0.01 -fr 0  -dir 1 $crntSurf;
				mod_nurbs2poly.removeHullsInV ($crntSurf, $shape[0]);
			}
		}
		else if (($formU != 2) && ($formV == 2)){	
			if ($degreeU == 3){
				rebuildSurface -ch 0 -rpo 1 -rt 0 -end 1 -kr 0 -kcp 1 -kc 0 -su 0 -du 1 -sv 0 -dv 0 -tol 0.01 -fr 0  -dir 0 $crntSurf;
				mod_nurbs2poly.removeHullsInU ($crntSurf, $shape[0]);
			}
		}
		else if (($formU != 2) && ($formV != 2)){
			if (($degreeU == 3) && ($degreeV == 3)){
				rebuildSurface -ch 0 -rpo 1 -rt 0 -end 1 -kr 0 -kcp 1 -kc 0 -su 0 -du 1 -sv 0 -dv 1 -tol 0.01 -fr 0  -dir 2 $crntSurf;
				mod_nurbs2poly.removeHullsInV ($crntSurf, $shape[0]);
				mod_nurbs2poly.removeHullsInU ($crntSurf, $shape[0]);
			}
			else if (($degreeU == 3) && ($degreeV == 1)){
				rebuildSurface -ch 0 -rpo 1 -rt 0 -end 1 -kr 0 -kcp 1 -kc 0 -su 0 -du 1 -sv 0 -dv 0 -tol 0.01 -fr 0  -dir 0 $crntSurf;
				mod_nurbs2poly.removeHullsInU ($crntSurf, $shape[0]);
			}
			else if (($degreeU == 1) && ($degreeV == 3)){
				rebuildSurface -ch 0 -rpo 1 -rt 0 -end 1 -kr 0 -kcp 1 -kc 0 -su 0 -du 0 -sv 0 -dv 1 -tol 0.01 -fr 0  -dir 1 $crntSurf;
				mod_nurbs2poly.removeHullsInV ($crntSurf, $shape[0]);
			}	
		}
		//$poly = `nurbsToPoly -ch 0 -mnd 1 -f 3 -pt 0 -pc 200 -chr 0.1 -ft 0.01 -mel 0.001 -d 0.1 -ut 1 -un 3 -vt 1 -vn 3 -uch 0 -ucr 0 -cht 0.2 -es 0 -ntr 0 -mrt 0 -uss 1 $crntSurf`;
		$poly = `nurbsToPoly -ch 0 -mnd 1 -f 2 -pt 1 -pc 200 -chr 0.1 -ft 0.01 -mel 0.001 -d 0.1 -ut 3 -un 1 -vt 3 -vn 1 -uch 0 -ucr 0 -cht 0.2 -es 0 -ntr 0 -mrt 0 -uss 1 $crntSurf`;
		
		if (size ($parent)){ //surf is in a group.
			tokenize $crntSurf "|" $buffer; //Get the clean name of the surf, in case the surf is in a group.
			delete $crntSurf; 
			$parentedSurf = `parent $poly[0] $parent[0]`; //Parent the new poly mesh to the group where the original nurbs surf was located.
			rename $parentedSurf[0] $buffer[size ($buffer) - 1]; //rename the new surf to the original name of the target surf.
		}
		else{ //surf is not in a group.
			delete $crntSurf;
			rename $poly[0] $crntSurf;
		}
		select -replace $surfSel; //After operation, I want to have the new poly mesh selected on the screen.
        if($previewMode == 1) {
            setDisplaySmoothness 3; 
        }
	}
        return $surfSel;
}

///
// Create shelf button for the toolBox.
//
global proc mod_nurbs2poly.createShelfButton() {
    
    shelfButton
        -enable 1
        -width 34
        -height 34
        -manage 1
        -visible 1
        -label "mod_nurbs2poly\nDESC:  converts nurbs surfaces into poly meshes, one to one.\n USAGE:  select nurbs surfaces and run the tool to convert." 
        -image1 "mod_nurbs2poly.xpm"  
        -style "iconOnly" 
        -command "mod_nurbs2poly";

    popupMenu -button 1;
    mod_nurbs2poly.createShelfMenu();

    popupMenu -button 2;

    mod_nurbs2poly.createShelfMenu();

    popupMenu -button 3;
    mod_nurbs2poly.createShelfMenu();

    
}

///
// Create a popup menu for the shelf icon.
//
global proc mod_nurbs2poly.createShelfMenu() {
    
    menuItem -l "Convert, display smooth mesh" -c "mod_nurbs2poly.nurbs2poly(1)";
    menuItem -l "Convert, display base mesh" -c "mod_nurbs2poly.nurbs2poly(0)";

}
